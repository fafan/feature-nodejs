{
  "_args": [
    [
      {
        "raw": "mklabs/mocha-gherkin",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "mklabs/mocha-gherkin",
        "spec": "github:mklabs/mocha-gherkin",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:mklabs/mocha-gherkin.git",
          "sshUrl": "git+ssh://git@github.com/mklabs/mocha-gherkin.git",
          "httpsUrl": "git+https://github.com/mklabs/mocha-gherkin.git",
          "gitUrl": "git://github.com/mklabs/mocha-gherkin.git",
          "shortcut": "github:mklabs/mocha-gherkin",
          "directUrl": "https://raw.githubusercontent.com/mklabs/mocha-gherkin/master/package.json"
        }
      },
      "/Users/fafan/bbb"
    ]
  ],
  "_from": "mklabs/mocha-gherkin",
  "_id": "mocha-gherkin@0.2.0",
  "_inCache": true,
  "_location": "/mocha-gherkin",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mklabs/mocha-gherkin",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "mklabs/mocha-gherkin",
    "spec": "github:mklabs/mocha-gherkin",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:mklabs/mocha-gherkin.git",
      "sshUrl": "git+ssh://git@github.com/mklabs/mocha-gherkin.git",
      "httpsUrl": "git+https://github.com/mklabs/mocha-gherkin.git",
      "gitUrl": "git://github.com/mklabs/mocha-gherkin.git",
      "shortcut": "github:mklabs/mocha-gherkin",
      "directUrl": "https://raw.githubusercontent.com/mklabs/mocha-gherkin/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "git://github.com/mklabs/mocha-gherkin.git#317a7689abb8862089bf6bb21796942dba98b4c7",
  "_shasum": "8159ccdabe9de404a4dc490c796ddf2ffbd4cadb",
  "_shrinkwrap": null,
  "_spec": "mklabs/mocha-gherkin",
  "_where": "/Users/fafan/bbb",
  "bin": {
    "mocha-gherkin": "./bin/mocha-gherkin"
  },
  "dependencies": {
    "gherkin": "~2.9.3",
    "handlebars": "^4.0.5",
    "nopt": "~1.0.10"
  },
  "description": "*A little tool to generate Mocha BDD specs from Gherkin features*",
  "devDependencies": {
    "mocha": "^3.1.2"
  },
  "engines": {
    "node": "~0.6.1"
  },
  "gitHead": "317a7689abb8862089bf6bb21796942dba98b4c7",
  "main": "./lib/parser",
  "name": "mocha-gherkin",
  "optionalDependencies": {},
  "readme": "\n# mocha-gherkin\n\n*A little tool to generate Mocha BDD specs from Gherkin features*\n\n## Installation\n\n    npm i mklabs/mocha-gherkin --save-dev\n\n## Description\n\nYou might now [cucumber](http://cukes.info/). There is now a robust JavaScript\nbased cucumber implementation \\o/ with\n[cucumber-js](https://github.com/cucumber/cucumber-js). This tool is not a\nreplacement or even trying to compete with cucumber-js. If you want a real and\nvalid cucumber implementation, search no more and head over the [cucumber-js\nreadme](https://github.com/cucumber/cucumber-js#readme). A really neat project,\nworth watching which will get better and better.\n\nMocha is another tool I recently found , and I do like it. A lot. I felt like I\nneeded and I could do a little tool to generate my mocha BDD tests stub.\n\nIt's not a test framework. It's not a cucumber-js replacement. It's not\nwrapping mocha to run the test, or defining any kind of report or mocha plugin.\n\nThis tool simply take a feature file, written in Gherkin syntax, as input, and\noutput the matching Mocha BDD tests for this feature file. It has some notion\nof step definition (kinda) and can output you the missing step definition as\nwell.\n\n\n## mocha-gherkin(1)\n\n    Usage: cat some.feature | ./node_modules/.bin/mocha-gherkin\n\n    Options:\n\n      -v, --version     Output package version\n      -h, --help        Output this help text\n      -s, --step        Path to a step definition (kinda)\n      -m, --missing     Will output missing step definition\n                        instead of default generated test\n\n## Usage\n\n```sh\n$ cat file.feature | mocha-gherkin > test.js\n```\n\nwith some step (like):\n\n```sh\n$ cat file.feature | mocha-gherkin -s ./steps/step-definition.js > test.js\n```\n\n\n## API\n\nThe parser is a readable / writable stream, so you can pipe any stream\nconnected to a valid feature like:\n\n```feature\nFeature: Example feature\n  As a very lazy programmer\n  I want to write some feature file\n  So that I can quickly make my mocha\n\n  Scenario: Reading the tests\n    Given I am in the test directory\n    When I read the index.js file\n    Then I should see \"new Parser\" somewhere\n```\n\nto a `new Parser`, and pipe it to a given destination.\n\n    var Parser = require('mocha-gherkin');\n    fs.createReadStream('local.feature')\n      .pipe(new Parser)\n      .pipe(process.stdout);\n\nYou'll get matching Mocha BDD style specs:\n\n```js\ndescribe(\"Example feature\", function() {\n\n  describe(\"As a very lazy programmer I want to write some feature file So that I can quickly make my mocha\", function() {\n\n    describe(\"Reading the tests\", function() {\n\n      it(\"Given I am in the test directory\", function() {\n\n      });\n\n      it(\"When I read the index.js file\", function() {\n\n      });\n\n      it(\"Then I should see 'new Parser' somewhere\", function() {\n\n      });\n\n    });\n\n  });\n\n});\n```\n\n## Steps definition (kinda)\n\nYou can fill in the body of `it()` handlers with some kind of step\ndefinitions (definitely not valid cucumber step definitions.. but kind of)\n\n```js\nvar parser = new Parser({\n  step: fs.readFileSync('./steps.js', 'utf8')\n});\n```\n\nThe `step.js` file is a JavaScript file running in a new [vm][] context,\nwith `Given`, `When`, `Then` and `And` function available. Each one\ntakes two argument, a regexp to match and a callback to read and use as\na body function for mocha `describe()` and `it()`.\n\nCaptured parameters are available as `$1`, `$2` and so on, these\nplaceholders get replaced by their relevant values from\nfeature description.\n\n```js\nGiven(/I am in the \"(.*)\" directory/, function(done) {\n  this.base = process.cwd();\n  process.chdir(path.resolve('$1'));\n  done();\n});\n\nWhen(/I read the \"(.*)\" file/, function(done) {\n  this.file = fs.createReadStream('$1');\n  this.file.pause();\n  done();\n});\n\nAnd(/I pipe it through a \"(.*)\"/, function(done) {\n  var self = this;\n  this.output = '';\n  this.parser = this.file.pipe($1)\n    .on('data', function(c) { self.output += c })\n    .on('close', done);\n\n  this.file.resume();\n});\n\nThen(/I should see the content of \"(.*)\"/, function(done) {\n  process.chdir(this.base);\n  var output = this.output;\n  fs.readFile('$1', 'utf8', function(err, body) {\n    if(err) return done(err);\n    assert.equal(body.trim(), output.trim());\n    done();\n  });\n});\n```\n\n### Step snippets\n\nWhen `--missing` option is set, the output won't return the usual generated\nstep but rather return you snippets for any step missing. It's handy to quicly\ngenerate the matching step file for a given feature file. Example:\n\n```sh\n$ cat example.feature | mocha-gherkin --missing\n```\n\nShould output:\n\n```js\nGiven(/I am in the test directory/, function() {\n  // add code for your definition here, regexp captured paramaters can be used\n  // in the function body with simple placeholders like $1, $2, ...\n});\n\nWhen(/I read the index.js file/, function() {\n  // add code for your definition here, regexp captured paramaters can be used\n  // in the function body with simple placeholders like $1, $2, ...\n});\n\nThen(/I should see 'new Parser' somewhere/, function() {\n  // add code for your definition here, regexp captured paramaters can be used\n  // in the function body with simple placeholders like $1, $2, ...\n});\n```\n\n[Gherkin syntax]: https://github.com/cucumber/cucumber/wiki/Gherkin\n[Mocha]: https://github.com/visionmedia/mocha\n[vm]: http://nodejs.org/api/vm.html#vm_vm_runinnewcontext_code_sandbox_filename\n\n",
  "readmeFilename": "readme.md",
  "scripts": {
    "test": "mocha"
  },
  "version": "0.2.0",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "~0.6.1"
      },
      "pkgid": "mocha-gherkin@0.2.0"
    },
    {
      "code": "ENOTSUP",
      "required": {
        "node": "~0.6.1"
      },
      "pkgid": "mocha-gherkin@0.2.0"
    }
  ]
}
